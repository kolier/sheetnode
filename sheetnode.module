<?php
// $Id$

/**
 * Implementation of hook_node_info().
 */
function sheetnode_node_info() {
  return array(
    'sheetnode' => array(
      'name' => t('Sheetnode'),
      'module' => 'sheetnode',
      'description' => t('A spreadsheet node.'),
    ),
  );
}

/**
 * Implementation of hook_perm().
 */
function sheetnode_perm() {
  return array('create sheetnode', 'edit own sheetnode', 'edit any sheetnode', 'delete own sheetnode', 'delete any sheetnode', 'create sheet template');
}

/**
 * Implementation of hook_access().
 */
function sheetnode_access($op, $node, $account) {
  if ($op == 'create') {
    return user_access('create sheetnode', $account);
  }

  if ($op == 'update') {
    return user_access('edit any sheetnode', $account) || (user_access('edit own sheetnode', $account) && ($account->uid == $node->uid));
  }

  if ($op == 'delete') {
    return user_access('delete any sheetnode', $account) || (user_access('delete own sheetnode', $account) && ($account->uid == $node->uid));
  }
}

/**
 * Implementation of hook_delete().
 */
function sheetnode_delete(&$node) {
  db_query('DELETE FROM {sheetnode} WHERE nid=%d', $node->nid);
}

/**
 * Implementation of hook_form().
 */
function sheetnode_form(&$node) {
  $type = node_get_types('type', $node);

  // Generate the default title and body.
  $form = node_content_form($node, NULL);
 
  // SocialCalc sheet.
  if (isset($_POST['sheetsave'])) {
    $value = $_POST['sheetsave'];
  }
  else if (!empty($node->nid)) {
    $value = _sheetnode_load($node->nid, $node->vid);
  }
  else {
    $value = '';
  }
  $output = _sheetnode_inject($value, TRUE);
  $form['sheet']['sheetview'] = array('#value' => $output, '#weight' => -1);
  $form['sheet']['sheetsave'] = array('#type' => 'hidden');

  // Template.
  if (user_access('create sheet template')) {
    $form['template'] = array(
      '#type' => 'textfield',
      '#title' => t('Save as template'),
      '#description' => t('When saving this sheet, also keep a copy under the name you specify here. Later, this copy can be used as a template for other sheets.'),
      '#required' => FALSE,
    );
  }

  return $form;
}

/**
 * Implementation of hook_form_alter().
 */
function sheetnode_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['type']) && isset($form['type']['#value']) && $form['type']['#value'] == 'sheetnode') {
    unset($form['buttons']['preview']);
  }
  
  // @see http://drupal.org/node/344040#comment-1155144
  if ($form_id == 'sheetnode_node_form') {
    if (isset($form['#post']['book'])) {
      $form['book']['bid'] = array(
        '#type' => 'hidden',
        '#value' => $form['#post']['book']['bid'],
      );
      $form['book']['plid'] = array(
        '#type' => 'hidden',
        '#value' => $form['#post']['book']['plid'],
      );
    }
  }
}

function _sheetnode_inject($value, $edit) {
  global $base_url;
  drupal_add_js(drupal_get_path('module', 'sheetnode').'/socialcalc/socialcalcconstants.js');
  drupal_add_js(drupal_get_path('module', 'sheetnode').'/socialcalc/socialcalc-3.js');
  drupal_add_js(drupal_get_path('module', 'sheetnode').'/socialcalc/socialcalctableeditor.js');
  drupal_add_js(drupal_get_path('module', 'sheetnode').'/socialcalc/formatnumber2.js');
  drupal_add_js(drupal_get_path('module', 'sheetnode').'/socialcalc/formula1.js');
  drupal_add_js(drupal_get_path('module', 'sheetnode').'/socialcalc/socialcalcpopup.js');
  drupal_add_js(drupal_get_path('module', 'sheetnode').'/socialcalc/socialcalcspreadsheetcontrol.js');
  drupal_add_js(drupal_get_path('module', 'sheetnode').'/socialcalc/socialcalcviewer.js');
  drupal_add_js(drupal_get_path('module', 'sheetnode').'/sheetnode.js');
  drupal_add_css(drupal_get_path('module', 'sheetnode').'/socialcalc/socialcalc.css');
  drupal_add_css(drupal_get_path('module', 'sheetnode').'/sheetnode.css');
  drupal_add_js(array('sheetnode' => array('value' => $value, 
                                           'image_prefix' => $base_url .'/' .drupal_get_path('module', 'sheetnode') .'/socialcalc/images/sc-',
                                           'view_id' => 'sheetview',
                                           'edit_id' => 'edit-sheetsave',
                                           'editing' => empty($edit) ? FALSE : TRUE,
                                           'fiddle' => variable_get('sheetnode_fiddle', TRUE),
  )), 'setting');
  drupal_add_js('Drupal.behaviors.sheetnode = function(context) { Drupal.sheetnode.start(context); }', 'inline');
  return '<div class="sheetview" id="sheetview"></div>';
}

function _sheetnode_sanitize_js($value) {
  $chars = array(
    chr(0xE2).chr(0x80).chr(0xA8), // Got this from Google Docs
  );
  return str_replace($chars, '', $value);
}

/**
 * Implementation of hook_insert().
 */
function sheetnode_insert($node) {
  if ($node->sheetsave) {
    _sheetnode_save($node->nid, $node->vid, $node->sheetsave);
  }
  if ($node->template && user_access('create sheet template')) {
    _sheetnode_template_save($node->vid, $node->template, $node->sheetsave);
  }
}

/**
 * Implementation of hook_update().
 */
function sheetnode_update($node) {
  if (!empty($node->sheetsave)) {
    _sheetnode_save($node->nid, $node->vid, $node->sheetsave);
  }
  else if (!empty($node->revision)) {
    // reverting a revision
    db_query('INSERT INTO {sheetnode} (nid,vid,value) SELECT old.nid,%d,old.value FROM sheetnode AS old WHERE old.vid=%d',array($node->vid,$node->old_vid));
  }
  if (!empty($node->template) && user_access('create sheet template')) {
    _sheetnode_template_save($node->vid, $node->template, $node->sheetsave);
  }
}

/**
 * Implementation of hook_view().
 */
function sheetnode_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);
  
  // SocialCalc sheet.
  if (!$teaser) {
    $value = _sheetnode_load($node->nid, $node->vid);
    $output = _sheetnode_inject($value, FALSE);
    $node->content['sheet'] = array('#value' => $output, '#weight' => -1);
  }

  return $node;
}

/**
 * Implementation of hook_nodeapi().
 */
function sheetnode_nodeapi($node, $op) {
  if ($node->type != 'sheetnode') return;
  switch ($op) {
  case 'update index':
    require_once(drupal_get_path('module', 'sheetnode') .'/socialcalc.inc');
    $output = '<table>';
    $socialcalc = socialcalc_parse(_sheetnode_load($node->nid, $node->vid));
    $sc = $socialcalc['sheet'];
    $row = -1;
    if (!empty($sc['cells'])) foreach ($sc['cells'] as $c) {
      if ($c['pos'][1] > $row) { // new row?
        if ($row != -1) {
          $output .= '</tr>';
        }
        $row = $c['pos'][1];
        $output .= '<tr>';
      }
      $output .= '<td>'. (isset($c['datavalue']) ? $c['datavalue'] : '&nbsp;') . (isset($c['comment']) ? ' ('. check_plain($c['comment']) .')' : '')  .'</td>';
    }
    if ($row != -1) {
      $output .= '</tr>';
    }
    $output .= '</table>';
    return $output;
  }
}

/**
 * Implementation of hook_menu().
 */
function sheetnode_menu() {
  $items = array();
  
  $items['sheetnode/load'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => '_sheetnode_ajax_load',
    'access arguments' => array('access content'),
  );
  $items['node/add/sheetnode_template'] = array(
    'title' => 'Sheetnode import from template',
    'access arguments' => array('create sheetnode'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sheetnode_import_template'),
    'description' => 'Create a new sheetnode from an existing template.',
  );
  $items['admin/settings/sheetnode'] = array(
    'title' => 'Sheetnode settings',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sheetnode_admin_settings'),
    'description' => 'Sheetnode module settings',
  );

  return $items;
}

function sheetnode_admin_settings() {
  $form['sheetnode_fiddle'] = array(
    '#type' => 'checkbox',
    '#title' => t('Fiddle mode'),
    '#description' => t('Allow users to interact with spreadsheet in view mode.'),
    '#default_value' => variable_get('sheetnode_fiddle', TRUE),
  );
  return system_settings_form($form);
}

function sheetnode_import_template(&$form_state) {
  $options[0] = t('- Please choose a template -');
  $result = db_query("SELECT tid, name FROM {sheetnode_template}");
  while ($template = db_fetch_object($result)) {
    $options[$template->tid] = $template->name;
  }
  $form['template'] = array(
    '#type' => 'select',
    '#title' => t('Template'),
    '#description' => t('Please select the template to load into your new sheetnode.'),
    '#options' => $options, 
    '#default_value' => 0,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

function sheetnode_import_template_validate($form, &$form_state) {
  if (!$form_state['values']['template']) {
    form_set_error('template', t('Please select a template.'));
  }
}

function sheetnode_import_template_submit($form, &$form_state) {
  global $user;
  module_load_include('inc', 'node', 'node.pages');
  $template = db_fetch_object(db_query("SELECT * FROM {sheetnode_template} WHERE tid=%d", $form_state['values']['template']));
  $node = array('type' => 'sheetnode', 'name' => $user->name);
  $form_state_node = array();
  $form_state_node['values']['title'] = $template->name;
  $form_state_node['values']['body'] = '';
  $form_state_node['values']['name'] = $user->name;
  $form_state_node['values']['sheetsave'] = unserialize($template->value);
  $form_state_node['values']['op'] = t('Save');
  
  // Allow other modules to modify the new node's creation parameters.
  // Hook signature: hook_sheetnode_template_alter(&$form_state_node, $template, $form, $form_state);
  drupal_alter('sheetnode_template', $form_state_node, $template, $form, $form_state);

  drupal_execute('sheetnode_node_form', $form_state_node, (object)$node);
  if (isset($form_state_node['nid'])) {
    $form_state['redirect'] = 'node/'. $form_state_node['nid'] .'/edit';
  }
}

/**
 * Implementation of hook_views_api().
 */
function sheetnode_views_api() {
  return array(
    'api' => 2.0,
  );
}

/**
 * Implementation of hook_theme().
 */
function sheetnode_theme($existing, $type, $theme, $path) {
  return array(
    'sheetnode_range' => array(
      'arguments' => array('range' => NULL),
    ),
  );
}

function theme_sheetnode_range($range) {
  if (empty($range)) return '';
  require_once(drupal_get_path('module', 'sheetnode') .'/socialcalc.inc');
  list($c, $r) = socialcalc_coord_to_cr(key($range));
  $row = array();
  $row[] = array('data' => $r, 'header' => TRUE);
  $header = array();
  $header[] = array();
  $rows = array();
  foreach ($range as $coord => $value) {
    $pos = socialcalc_coord_to_cr($coord);
    if ($pos[1] > $r) {
      $rows[] = $row;
      $r = $pos[1];
      $row = array();
      $row[] = array('data' => $r, 'header' => TRUE);
    }
    $row[] = $value;
    if (empty($rows)) {
      $coord = socialcalc_cr_to_coord($pos[0], $pos[1], TRUE);
      $header[] = $coord[0];
    }
  }
  $rows[] = $row;
  return theme('table', $header, $rows);
}

/**
 * Implementation of hook_init().
 */
function sheetnode_init() {
  drupal_add_css(drupal_get_path('module', 'sheetnode').'/socialcalc/socialcalc.css');
  drupal_add_css(drupal_get_path('module', 'sheetnode').'/sheetnode.css');
}

/**
 * Implementation of hook_content_extra_fields().
 */
function sheetnode_content_extra_fields($type_name) {
  $extra = array();
  if ($type_name == 'sheetnode') {
    $extra['sheet'] = array(
      'label' => t('Sheetview'),
      'description' => t('Sheetnode module form.'),
      'weight' => -1,
    );
  }
  return $extra;
}

function _sheetnode_ajax_load($sheetname = NULL, $vid = NULL) {
  require_once(drupal_get_path('module', 'sheetnode') .'/socialcalc.inc');
  if (!$sheetname) $sheetname = $_REQUEST['sheetname'];
  if (is_numeric($sheetname)) {
    $value = db_result(db_query("SELECT value FROM {sheetnode} WHERE nid=%d ORDER BY vid DESC LIMIT 1", intval($sheetname)));
  }
  else {
    $value = db_result(db_query("SELECT value FROM {sheetnode} s INNER JOIN {node} n ON s.nid=n.nid WHERE UCASE(n.title)='%s' ORDER BY s.vid DESC LIMIT 1", db_escape_string(strtoupper($sheetname))));
  }
  if (!$value && module_exists('views')) { // Try a view feed with our SocialCalc output plugin style
    $view = views_get_view($sheetname);
    if ($view) foreach (array_keys($view->display) as $display_name) {
      $display = $view->display[$display_name];
      if (isset($display->display_options['style_plugin']) && $display->display_options['style_plugin'] == 'sheet_raw') {
        $value = $view->render($display->id);
        header('Content-type: text/html'); // Our style plugin sets this to text/plain
      } 
    }
  }
  if ($value) {
    $parts = socialcalc_parse_parts($value);
    if (isset($parts['sheet'])) {
      echo $parts['sheet'];
    }
  }
  exit();
}

function _sheetnode_load($nid, $vid) {
  $value = db_result(db_query("SELECT value FROM {sheetnode} WHERE nid=%d AND vid=%d", $nid, $vid));
  return $value ? unserialize($value) : '';
}

function _sheetnode_save($nid, $vid, $value) {
  db_query("DELETE FROM {sheetnode} WHERE vid=%d", $vid);
  db_query("INSERT INTO {sheetnode} (nid, vid, value) VALUES (%d, %d, '%s')", $nid, $vid, serialize(_sheetnode_sanitize_js($value)));
}

function _sheetnode_template_save($vid, $name, $value) {
  $record = (object)array('name' => $name, 'value' => $value, 'vid' => $vid);
  if ($tid = db_result(db_query("SELECT tid FROM {sheetnode_template} WHERE name='%s'", db_escape_string($name)))) {
    $record->tid = $tid;
  }
  drupal_write_record('sheetnode_template', $record, $tid ? 'tid' : array());
}

function _sheetnode_sanitize_filename($filename, $extension) {
  $filename  = preg_replace('/[^a-zA-Z0-9-_.]/', '-', $filename);
  $filename .= '.'. $extension;
  return $filename;
}

